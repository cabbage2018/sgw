#Set sources
FILE(GLOB SOURCES *.c)
LIST(APPEND ITAG_SOURCES ${SOURCES})

SET(INTEAGENTED_SOURCES ${INTEAGENTED_SOURCES} CACHE INTERNAL "INTEAGENTED_SOURCES" FORCE)

# 打印信息
message(STATUS "src/This is BINARY dir " ${PROJECT_BINARY_DIR})
message(STATUS "src/This is SOURCE dir " ${PROJECT_SOURCE_DIR})

# 定义工程根目录; CMAKE_SOURCE_DIR为内建变量，表示工程根目录的CMakeLists.txt文件路径
SET(ROOT_DIR ${CMAKE_SOURCE_DIR})

# 指定头文件搜索路径
INCLUDE_DIRECTORIES(${ROOT_DIR}/include)

# 指定引用的外部库的搜索路径
LINK_DIRECTORIES(${ROOT_DIR}/lib)

# 指定可执行文件存放目录
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)




#Specify library as target
SET(PROJECT_LIBRARY_OUTPUT itag CACHE INTERNAL "PROJECT_LIBRARY_OUTPUT" FORCE)
ADD_LIBRARY(${PROJECT_LIBRARY_OUTPUT} ${INTEAGENTED_USER_DEFINED_DYNAMIC_OR_STATIC} $<TARGET_OBJECTS:zf_log> $<TARGET_OBJECTS:cJSON> ${ITAG_SOURCES})
TARGET_LINK_LIBRARIES(${PROJECT_LIBRARY_OUTPUT} paho-mqtt3c paho-mqtt3a)
TARGET_LINK_LIBRARIES(${PROJECT_LIBRARY_OUTPUT} pthreadVC2)

# 构建可执行程序
ADD_EXECUTABLE(agent $<TARGET_OBJECTS:zf_log> $<TARGET_OBJECTS:cJSON> ${ITAG_SOURCES})
TARGET_LINK_LIBRARIES(agent paho-mqtt3c paho-mqtt3a)
TARGET_LINK_LIBRARIES(agent pthreadVC2)

#Create configuration file from template which contains preprocessor definition
CONFIGURE_FILE(config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/mcl_config.h)

#Set include directories
LIST(APPEND MCL_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR})
LIST(APPEND MCL_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_BINARY_DIR})
LIST(APPEND MCL_INCLUDE_DIRECTORIES ${INTEAGENTED_CMAKE_ROOT_DIR}/include)
LIST(APPEND MCL_INCLUDE_DIRECTORIES ${INTEAGENTED_CMAKE_ROOT_DIR}/lib)

SET(ITAG_INCLUDE_DIRECTORIES ${INTEAGENTED_INCLUDE_DIRECTORIES} CACHE INTERNAL "INTEAGENTED_INCLUDE_DIRECTORIES" FORCE)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_LIBRARY_OUTPUT} PUBLIC ${INTEAGENTED_INCLUDE_DIRECTORIES})

TARGET_LINK_LIBRARIES(${PROJECT_LIBRARY_OUTPUT} ${INTEAGENTED_LIBS})

#Set linker flag -lm for linking against the math lib (pow() floor())
IF(CMAKE_COMPILER_IS_GNUCC)
    TARGET_LINK_LIBRARIES(${PROJECT_LIBRARY_OUTPUT} m)
ENDIF()

#Set variables for distribution package destination
SET(PACKAGE_DESTINATION_BIN "bin")
SET(PACKAGE_DESTINATION_LIB "lib")

#Install ITAG target
INSTALL(TARGETS itag
        RUNTIME DESTINATION ${PACKAGE_DESTINATION_BIN} COMPONENT ${BINARY_COMPONENT_NAME}
        LIBRARY DESTINATION ${PACKAGE_DESTINATION_LIB} COMPONENT ${BINARY_COMPONENT_NAME}
        ARCHIVE DESTINATION ${PACKAGE_DESTINATION_LIB} COMPONENT ${BINARY_COMPONENT_NAME})
